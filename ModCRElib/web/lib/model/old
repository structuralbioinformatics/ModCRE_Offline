import datetime
import hashlib
import json
import os.path as op
import sys, os
import random
import time
import shutil

from ..src import readJSON, dumpJSON, text2file, file2text

cfile  = op.join(op.dirname(op.abspath(__file__)), '../etc/config.json')
config = readJSON(cfile)


class ExperimentFabric(object):
    @staticmethod
    def build(ip, exType, exInput, job_id):
        pid   = os.getpid()
        itms  = [str(x)for x in range(20)]
        random.shuffle(itms)
        rdm   = ''.join(itms)
        ts    = time.time()
        dt    = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        tmp   = '{0}-{1}'.format(ts, dt)
        #_id   = hashlib.md5('{0}-{1}-{2}-{3}'.format(ip, pid, rdm, tmp)).hexdigest()
        _id = job_id
        exp   = Experiment(_id)
        exp.start(exType, exInput)
        # print posiblemente mio: print(str(config['experiment_folder'].format(self._id)))
        return exp


class Experiment(object):
    def __init__(self, _id):
        self._id = _id
        #self.main_dir = op.join(op.dirname(op.abspath(__file__)), '../../result/hatti/')
        self.dna = {
            'file': 'input.dna.fa',
            'seq' : []
        }
        self._devel = []    


        if op.isdir(self.main_dir):
            self.__dict__ = readJSON(self.log_file)

    @property
    def main_dir(self):
        # This line is to create output directories in a example directory #
        #return os.path.abspath(config['experiment_folder'].format(os.path.join("examples", self._id)))
        return os.path.abspath(config['experiment_folder'].format(self._id))

    @property
    def dna_dir(self):
        return op.join(self.main_dir, 'DNA')

    @property
    def log_file(self):
        return '{0.main_dir}/{0._id}_full.json'.format(self)

    @property
    def dna_file(self):
        return self.dna['file']

    def make_dna_file(self):
        text = []
        self._devel.append('here')
        for v in self.dna['seq']:
            self._devel.append('add')
            text.append('\n'.join(file2text(op.join(self.dna_dir, v['file']))))
        if len(text) > 0:
            self._devel.append('\n'.join(text))
            self._devel.append(self.file_path(self.dna_file))
            text2file('\n'.join(text), self.file_path(self.dna_file))

    def add_dna(self, dna):
        info   = dna.splitlines()

        id     = hashlib.md5(info[0]).hexdigest()
        newdna = {
            '_id'   : info[0],
            'full_sequence': info[1],
            'file'  : id + '.fa',
            'done': False
        }
        text2file(dna, op.join(self.dna_dir,newdna['file']))
        print("length of a full sequence: " + str(info))
        self.dna['seq'].append(newdna)

    def file_path(self, qfile):
        return op.join(self.main_dir, qfile)

    def result_path(self, qfile):
        return op.join(self._id, qfile)

    def start(self, exType, exInput):
        if os.path.exists(self.dna_dir) == False:
            os.makedirs(self.dna_dir)
        self.type  = exType
        self.input = exInput

    def restart(self):
        # When doing the restart we do not erase the DNA directory #
        if os.path.exists(self.dna_dir) == True:
            shutil.rmtree(self.dna_dir)
        if os.path.isfile(self.log_file) == True:
            os.system("rm " + self.log_file)
        #for key in ["logos", "dna", "_devel", "interface", "pwm", "pdb"]:
        #    del self.__dict__[key]
        self.dna = {
            'file': 'input.dna.fa',
            'seq' : []
        }
        self._devel = [] 

    
    def confirm(self):
        return json.dumps(self.__dict__)
    

    def include_id(self):
        self.__dict__['jobid'] = self._id

    def include_options(self, templates=None, models=None, mergedPWM=None, monomers=None, dimers=None, tfdnaModeling=None, energyAnalysis=None, templateComparison=None, thresholdPval=None, uniprotSearch=None, specie=None, family=None, fimo_threshold=None, time=None, job_name=None, input_pwm=None):
        # protein2DNA options #
        self.__dict__["templates"] = templates
        self.__dict__["models"] = models
        self.__dict__["mergedPWM"] = mergedPWM
        self.__dict__["monomers"] = monomers
        self.__dict__["dimers"] = dimers
        self.__dict__["tfdnaModeling"] = tfdnaModeling
        self.__dict__["energyAnalysis"] = energyAnalysis
        self.__dict__["templateComparison"] = templateComparison
        self.__dict__["thresholdPval"] = thresholdPval
        self.__dict__["uniprotSearch"] = uniprotSearch
        self.__dict__["input_pwm"] = input_pwm
        # DNA2protein options #
        self.__dict__["specie"] = specie
        self.__dict__["family"] = family
        self.__dict__["fimo_threshold"] = fimo_threshold
        # Queue options #
        self.__dict__["job_name"] = job_name
        self.__dict__["time"] = time


    def get_content(self, query):
        if 'all' in query:
            query = self.__dict__.keys()

        reply = {'_id':self._id}
        for k in query:
            if k in self.__dict__:
                if k == 'logos':
                    reply[k] = [self.result_path(x) for x in self.__dict__[k]]
            else:
                reply[k] = self.__dict__[k]
        return reply

    def toJSON(self):
        dumpJSON(self.log_file, self.__dict__)
